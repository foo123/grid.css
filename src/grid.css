/* https://github.com/foo123/grid.css */
.grid {
    position: relative;
    display: block;
    box-sizing: border-box;
    list-style-type: none !important;
    font-size: 0 !important;
    margin: 0;
    border: 0;
    padding: 0;
    text-align: left;
    width: 100%;
    height: auto;
    --columns: 4;
    --column-gap: 0;
    --row-gap: 0;
}
.grid > * {
    position: relative;
    display: inline-block;
    box-sizing: border-box;
    font-size: 1rem;
    margin: 0;
    height: auto;
}

/* using grid layout */
.grid.grid-layout {
    display: grid;
    grid-template-columns: repeat(var(--columns, 1), 1fr);
    grid-template-rows: auto;
    column-gap: var(--column-gap, 0);
    row-gap: var(--row-gap, 0);
    justify-content: stretch;
}
.grid.grid-layout > * {
}

/* using flex layout */
.grid.flex-layout {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: flex-start;
    align-items: flex-start;
    align-content: flex-start;
    column-gap: var(--column-gap, 0);
    row-gap: var(--row-gap, 0);
}
.grid.flex-layout > * {
    flex: 0 1 calc((100% - (var(--columns, 1) - 1) * var(--column-gap, 0)) / var(--columns, 1));
}

/* using inline-block */
.grid:not(.flex-layout):not(.grid-layout) > * {
    display: inline-block;
    vertical-align: top;
    width: calc((100% - (var(--columns, 1) - 1) * var(--column-gap, 0)) / var(--columns, 1));
    margin-bottom: var(--row-gap, 0);
}
/* handle automatically up to 15 items per row */
.grid:not(.flex-layout):not(.grid-layout) > * {
    --g-is1n: calc(1 - abs(clamp(-1, var(--columns, 1) - 1, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(2n) {
    --g-is2n: calc(1 - abs(clamp(-1, var(--columns, 1) - 2, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(3n) {
    --g-is3n: calc(1 - abs(clamp(-1, var(--columns, 1) - 3, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(4n) {
    --g-is4n: calc(1 - abs(clamp(-1, var(--columns, 1) - 4, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(5n) {
    --g-is5n: calc(1 - abs(clamp(-1, var(--columns, 1) - 5, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(6n) {
    --g-is6n: calc(1 - abs(clamp(-1, var(--columns, 1) - 6, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(7n) {
    --g-is7n: calc(1 - abs(clamp(-1, var(--columns, 1) - 7, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(8n) {
    --g-is8n: calc(1 - abs(clamp(-1, var(--columns, 1) - 8, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(9n) {
    --g-is9n: calc(1 - abs(clamp(-1, var(--columns, 1) - 9, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(10n) {
    --g-is10n: calc(1 - abs(clamp(-1, var(--columns, 1) - 10, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(11n) {
    --g-is11n: calc(1 - abs(clamp(-1, var(--columns, 1) - 11, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(12n) {
    --g-is12n: calc(1 - abs(clamp(-1, var(--columns, 1) - 12, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(13n) {
    --g-is13n: calc(1 - abs(clamp(-1, var(--columns, 1) - 13, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(14n) {
    --g-is14n: calc(1 - abs(clamp(-1, var(--columns, 1) - 14, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > *:nth-child(15n) {
    --g-is15n: calc(1 - abs(clamp(-1, var(--columns, 1) - 15, 1)));
}
.grid:not(.flex-layout):not(.grid-layout) > * {
    --g-is-not-on-edge: calc(1 - min(1, calc(var(--g-is1n, 0) + var(--g-is2n, 0) + var(--g-is3n, 0) + var(--g-is4n, 0) + var(--g-is5n, 0) + var(--g-is6n, 0) + var(--g-is7n, 0) + var(--g-is8n, 0) + var(--g-is9n, 0) + var(--g-is10n, 0) + var(--g-is11n, 0) + var(--g-is12n, 0) + var(--g-is13n, 0) + var(--g-is14n, 0) + var(--g-is15n, 0))));
    margin-right: calc(var(--g-is-not-on-edge) * var(--column-gap, 0));
}
